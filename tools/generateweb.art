#!/usr/bin/env arturo

packages: # "packages/list.art"
entries: new []

siteroot: (key? env 'GITHUB_ACTION)? -> "https://pkgr.art"
                                     -> "file:///Users/drkameleon/Documents/Code/OpenSource/arturo-lang/pkgr.art/public"

deploying?: key? env 'GITHUB_ACTION

isHome: false

compressHTML: function [file][
    execute ~{!sh 
        html-minifier --collapse-whitespace --remove-comments --remove-optional-tags --remove-redundant-attributes --remove-script-type-attributes --use-short-doctype --minify-css true |file| -o |file|
    }
]

compressCSS: function [file][
    execute ~{!sh 
        cleancss |file| -o |file|
    }
]

getProperMarkdown: function [md][
    write "tmp.md" md
    ret: execute ~{ruby |relative "gfm.rb"| tmp.md}
    ; print ["Got:\n" ret]
    ; ret: read.markdown md
    delete "tmp.md"
    ret: replace ret {/class="language-[^"]+"/} ""
    ret: replace ret {<a href="http} {<a rel="nofollow" target="_blank" href="http}
    return ret
]

getLink: function [loc, subv][
    rett: ""
    (deploying?)?[
        rett: "https://" ++ loc ++ ".pkgr.art"
        unless null? subv ->
            rett: rett ++ "/" ++ to :string subv
    ][
        rett: siteroot ++ "/" ++ loc
        unless null? subv ->
            rett: rett ++ "/" ++ to :string subv
        rett: rett ++ "/index.html"
    ]
    return rett
]

getPackageBox: function [entry][
    render.template read "website/components/package-box.html"
]

getCleanTags: function [taglist][
    taglist | filter 'tag [contains? ["arturo", "arturo-lang", "arturo-language", "arturo-package", "pkgr-art", "package"] tag]
            | map 'tag [replace tag "-" " "]
]

octicon: function [icon][
    read ~"website/icons/|icon|.svg"
]

postprocessAlerts: function [src][
    replace src [
        {/<blockquote>\n<p>\[!TIP\]/}
        {/<blockquote>\n<p>\[!NOTE\]/}
        {/<blockquote>\n<p>\[!IMPORTANT\]/}
        {/<blockquote>\n<p>\[!WARNING\]/}
        {/<blockquote>\n<p>\[!CAUTION\]/}
     ]@[
        ~"<blockquote class='alert alert-tip'>\n<p><b class='alert-message'>|octicon 'lightbulb|Tip</b><br>\n"
        ~"<blockquote class='alert alert-note'>\n<p><b class='alert-message'>|octicon 'info|Note</b><br>\n"
        ~"<blockquote class='alert alert-important'>\n<p><b class='alert-message'>|octicon 'report|Important</b><br>\n"
        ~"<blockquote class='alert alert-warning'>\n<p><b class='alert-message'>|octicon 'alert|Warning</b><br>\n"
        ~"<blockquote class='alert alert-caution'>\n<p><b class='alert-message'>|octicon 'stop|Caution</b><br>\n"
     ]
]

postprocessImages: function [src,repoName][
    replace src [
        {#gh-dark-mode-only"}
        {src="./}
    ]@[
        {#gh-dark-mode-only" style="display:none"}
        ~{src="https://raw.githubusercontent.com/|repoName|/master/}
    ]
]

postprocessHTML: function [htm, repoName][
    postprocessImages postprocessAlerts htm repoName
]

createSpecFile: function [package, versionToProcess, targetFolder][
    ret: #[
        name: package\name,
        description: package\info\description
        license: package\info\license\name
        author: package\info\author\name
        version: versionToProcess\version
        url: versionToProcess\url
        entry: versionToProcess\info\entry
        depends: versionToProcess\info\depends
        requires: versionToProcess\info\requires
    ]

    write ~"|targetFolder|/spec" replace strip as.pretty.unwrapped.code ret {/\[\n\n\s+\]/} "[]"
]

searchable: new []

loop packages [k,v][
    inf: # ~"packages/info/|k|.art"
    vers: do "@" ++ read ~"packages/version/|k|.art" 
    ;--------------------------------
    ; DEBUGGING!
    ;--------------------------------
    ; inf\tags: ["database", "i18n", "sqlite", "mysql"]
    ; vers\0\info\depends: ["boom", "zoom", "foom"]
    ; vers\0\info\requires: [> 0.9.83]
    'entries ++ #[
        name: k
        info: inf
        version: vers
    ]

    'searchable ++ #[
        value: k,
        description: inf\description,
        tags: inf\tags,
        version: vers\0\version
    ]
]

processPackagePage: function [entry][
    packageTitle: entry\name ++ " &bull; "
    postprocessHTML render.template read "website/package.html" entry\info\fullName
]

;--------------------------------
; DEBUGGING!
;--------------------------------
; entry2: new searchable\0
; entry2\value: "easyhtml"

; entry3: new searchable\0
; entry3\value: "artsembly"

; 'searchable ++ entry2
; 'searchable ++ entry3

searchable: write.json ø searchable

loop entries 'entry [
    tgtName: ~{public/|entry\name|}
    unless exists?.directory tgtName ->
        write.directory tgtName ø

    currentVersion: first entry\version
    currentVersionIsLatest: true
    write ~{|tgtName|/index.html} processPackagePage entry

    createSpecFile entry currentVersion tgtName

    loop entry\version 'vv [
        versionTgt: ~{public/|entry\name|/|vv\version|}
        unless exists?.directory versionTgt ->
            write.directory versionTgt ø

        currentVersion: vv
        currentVersionIsLatest: false
        write ~{|versionTgt|/index.html} processPackagePage entry

        createSpecFile entry vv versionTgt
    ]
]

entries: arrange.descending entries 'entry [
    entry\version\0\date
]

if odd? size entries ->
    'entries ++ null

; render homepage
isHome: true
packageTitle: ""
write "public/index.html"
      render.template read "website/index.html"

; and compress it
compressHTML "public/index.html"

; compile scss
execute "sass website/style.scss public/style.css"

; and compress it too
compressCSS "public/style.css"

; copy resources
loop list "website/images" 'file [
    copy file replace file "website/" "public/"
]

; copy main javascript
copy "website/script.js" "public/script.js"

; copy server scripts
copy "website/download.php" "public/download.php"
copy "website/getdownloads.php" "public/getdownloads.php"

; copy searchable items
copy "website/searchable.json" "public/searchable.json"

print color #green "Done!"
