#!/usr/bin/env arturo

packages: # "packages/list.art"
entries: new []

siteroot: (key? env 'GITHUB_ACTION)? -> "https://pkgr.art"
                                     -> "file:///Users/drkameleon/Documents/Code/OpenSource/arturo-lang/pkgr.art/public"

deploying?: key? env 'GITHUB_ACTION

isHome: false

compressHTML: function [file][
    execute ~{!sh 
        html-minifier --collapse-whitespace --remove-comments --remove-optional-tags --remove-redundant-attributes --remove-script-type-attributes --use-short-doctype --minify-css true |file| -o |file|
    }
]

compressCSS: function [file][
    execute ~{!sh 
        cleancss |file| -o |file|
    }
]

getProperMarkdown: function [md][
    ret: read.markdown md
    ret: replace ret {/class="language-[^"]+"/} ""
    return ret
]

getLink: function [loc, subv][
    rett: ""
    (deploying?)?[
        rett: "https://" ++ loc ++ ".pkgr.art"
        unless null? subv ->
            rett: rett ++ "/" ++ to :string subv
    ][
        rett: siteroot ++ "/" ++ loc
        unless null? subv ->
            rett: rett ++ "/" ++ to :string subv
        rett: rett ++ "/index.html"
    ]
    return rett
]

createSpecFile: function [package, versionToProcess, targetFolder][
    ret: #[
        name: package\name,
        description: package\info\description
        license: package\info\license\name
        author: package\info\author\name
        version: versionToProcess\version
        url: versionToProcess\url
        entry: versionToProcess\info\entry
        depends: versionToProcess\info\depends
        requires: versionToProcess\info\requires
    ]

    write ~"|targetFolder|/spec" replace strip as.pretty.unwrapped.code ret {/\[\n\n\s+\]/} "[]"
]

searchable: new []

loop packages [k,v][
    inf: # ~"packages/info/|k|.art"
    vers: do "@" ++ read ~"packages/version/|k|.art" 
    ;--------------------------------
    ; DEBUGGING!
    ;--------------------------------
    ; inf\tags: ["database", "i18n", "sqlite", "mysql"]
    ; vers\0\info\depends: ["boom", "zoom", "foom"]
    ; vers\0\info\requires: [> 0.9.83]
    'entries ++ #[
        name: k
        info: inf
        version: vers
    ]

    'searchable ++ #[
        value: k,
        description: inf\description,
        tags: inf\tags,
        version: vers\0\version
    ]
]

;--------------------------------
; DEBUGGING!
;--------------------------------
; entry2: new searchable\0
; entry2\value: "easyhtml"

; entry3: new searchable\0
; entry3\value: "artsembly"

; 'searchable ++ entry2
; 'searchable ++ entry3

searchable: write.json ø searchable

loop entries 'entry [
    tgtName: ~{public/|entry\name|}
    unless exists?.directory tgtName ->
        write.directory tgtName ø

    currentVersion: first entry\version
    currentVersionIsLatest: true
    write ~{|tgtName|/index.html}
          render.template read "website/package.html"

    createSpecFile entry currentVersion tgtName

    loop entry\version 'vv [
        versionTgt: ~{public/|entry\name|/|vv\version|}
        unless exists?.directory versionTgt ->
            write.directory versionTgt ø

        currentVersion: vv
        currentVersionIsLatest: false
        write ~{|versionTgt|/index.html}
              render.template read "website/package.html"

        createSpecFile entry vv versionTgt
    ]
]

if odd? size entries ->
    'entries ++ null

; render homepage
isHome: true
write "public/index.html"
      render.template read "website/index.html"

; and compress it
compressHTML "public/index.html"

; compile scss
execute "sass website/style.scss public/style.css"

; and compress it too
compressCSS "public/style.css"

; copy resources
loop list "website/images" 'file [
    copy file replace file "website/" "public/"
]

; copy main javascript
copy "website/script.js" "public/script.js"

; copy server scripts
copy "website/download.php" "public/download.php"
copy "website/getdownloads.php" "public/getdownloads.php"
copy "website/getlist.php" "public/getlist.php"

; copy searchable items
copy "website/searchable.json" "public/searchable.json"

print color #green "Done!"
