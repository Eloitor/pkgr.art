#!/usr/bin/env arturo

AccessToken: read "github.pat"
IsCI?: false

;--------------------------------------------------
; Helper methods
;--------------------------------------------------

getGH: function [req][
    accepting: "application/vnd.github+json"
    apiVersion: "2022-11-28"

    (IsCI?)?[
        print "we're here!"
        got: execute ~{!sh
            gh api -H "Accept: |accepting|" -H "X-GitHub-Api-Version: |apiVersion|" /|req|
        }
        print got
    ][
        got: request.get.headers: #[
            "Accept": accepting
            "Authorization": ~"Bearer |AccessToken|"
            "X-GitHub-Api-Version": apiVersion
        ] ~{https://api.github.com/|req|} ø
        return read.json got\body
    ]
]

extractCorrectVersion: function [versionString][
    try? -> to :version versionString
    else [
        try? -> to :version strip replace versionString "v" ""
        else -> null
    ]
]

;--------------------------------------------------
; Main routines
;--------------------------------------------------

getReadme: function [owner, repo][
    got: getGH ~"repos/|owner|/|repo|/readme"
    if key? got 'download_url ->
        return read got\download_url
    return ø
]

getRepoInfo: function [owner, repo][
    try? [
        got: getGH ~"repos/|owner|/|repo|"
        #[
            name: got\name
            fullName: got\full_name
            url: got\html_url
            description: got\description
            tags: got\topics
            license: (got\license)? -> got\license\spdx_id -> "--"
            readme: getReadme owner repo
            stats: #[
                stars: got\stargazers_count
                watch: got\watchers_count
            ]
            author: #[
                name: got\owner\login
                url: got\owner\html_url
                avatar: got\owner\avatar_url
            ]
        ]
    ]
    else [
        null
    ]
]

getReleaseInfo: function [owner, repo, version, url][
    tgt: ~{tmp/|owner|-|repo|-|version|.zip}
    download.as: tgt url
    unzip "tmp" tgt
    delete tgt

    tgtFolder: first list "tmp"
    infoFile: ~"|tgtFolder|/info.art"

    ret: #[]

    if exists? infoFile ->
        ret: # infoFile

    unless key? ret 'entry ->
        ret\entry: "main.art"

    unless ".art" = extract.extension ret\entry ->
        ret\entry: ret\entry ++ ".art"

    unless key? ret 'depends ->
        ret\depends: []

    unless key? ret 'requires ->
        ret\requires: [> 0.0.0]

    unless exists? ~{|tgtFolder|/|ret\entry|} ->
        ret: null

    delete.directory tgtFolder

    return ret
]

getVersions: function [owner, repo][
    greaterThan: (attr 'greaterThan) ?? 0.0.0
    available: new []
    try [
        releases: getGH ~"repos/|owner|/|repo|/releases"
        loop releases 'release [
            if ver: <= extractCorrectVersion release\name [
                if ver > greaterThan [
                    if releaseInfo: <= getReleaseInfo owner repo ver release\zipball_url [
                        'available ++ #[
                            version: ver
                            date: to :date release\published_at
                            url: release\zipball_url
                            info: releaseInfo
                        ]
                    ]
                ]
            ]
        ]
    ]
    return available
]

;--------------------------------------------------
; Running directly from console
;--------------------------------------------------

if standalone? ::
    owner: arg\0
    repo: arg\1
    inspect getRepoInfo owner repo
    print as.pretty.code getVersions owner repo