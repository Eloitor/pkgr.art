#!/usr/bin/env arturo

AccessToken: read "github.pat"

;--------------------------------------------------
; Helper methods
;--------------------------------------------------

getGithub: function [u][
    got: request.get.headers: #[
        "Accept": "application/vnd.github+json"
        "Authorization": ~"Bearer |AccessToken|"
        "X-GitHub-Api-Version": "2022-11-28"
    ] u Ã¸
    return read.json got\body
]

getCorrectVersion: function [versionString][
    try? -> to :version versionString
    else [
        try? -> to :version strip replace versionString "v" ""
        else -> null
    ]
]

getLicenseInfo: function [owner, repo][
    lcns: read.json ~"https://api.github.com/repos/|owner|/|repo|/license"
    return lcns\license\spdx_id
]

getTopicsInfo: function [owner, repo][
    topics: read.json ~"https://api.github.com/repos/|owner|/|repo|/topics"
    return topics\names
]

getAuthorInfo: function [user][
    print "here"
    authorData: read.json ~"https://api.github.com/users/|user|"
    inspect authorData
    return #[
        name: authorData\name
        nickname: user
        avatar: authorData\avatar_url
        url: authorData\html_url
    ]
]

getRepoInfo: function [owner, repo, details][
    tgt: ~{tmp/|owner|-|repo|-|details\version|.zip}
    download.as: tgt details\url
    unzip "tmp" tgt
    delete tgt

    tgtFolder: first list "tmp"
    infoData: # ~"|tgtFolder|/info.art"

    delete.directory tgtFolder

    return infoData
]

getRepoDetails: function [owner,repo][
    try? [
        repoData: read.json ~"https://api.github.com/repos/|owner|/|repo|/releases"
        inspect repoData
        availableVersions: new []
        loop repoData 'entry [
            if ver: <= getCorrectVersion entry\name [

                'availableVersions ++ #[
                    version: ver
                    date: to :date entry\published_at
                    url: entry\zipball_url
                    author: entry\author\login
                ]
            ]   
        ]
        latest: first availableVersions

        infos: getRepoInfo owner repo latest

        #[
            latest: #[
                version: latest\version
                timestamp: latest\date
                url: latest\url
                details: #[
                    description: infos\description
                    entry: infos\entry
                    dependencies: infos\depends
                    requirement: infos\requires
                ]
            ]
            author: getAuthorInfo latest\author
            license: getLicenseInfo owner repo
            tags: getTopicsInfo owner repo
        ]
    ]
    else [
        null
    ]
]

;--------------------------------------------------
; Running directly from console
;--------------------------------------------------

if standalone? ::
    owner: arg\0
    repo: arg\1
    print as.unwrapped.pretty.code getRepoDetails owner repo